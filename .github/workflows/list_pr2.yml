name: List Merged PRs for Release

on:
  pull_request:
    types: [opened, synchronize]
    branches:
      - main

jobs:
  list-prs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # すべてのコミットを取得

      - name: List PRs with the commit hash
        run: |
          # Initialize an empty array to store PR details
          PR_DETAILS=()

          # Fetch all commit OIDs in the PR
          COMMIT_OIDS=$(gh pr view ${{ github.event.pull_request.number }} --json commits --jq '.commits[].oid')

          # Loop through each commit OID
          for COMMIT_OID in $COMMIT_OIDS; do
            echo "Processing commit: $COMMIT_OID"
          
            # Use gh pr list with the commit OID to find the related PR details
            PR_DETAILS_JSON=$(gh pr list --search "$COMMIT_OID" --state merged --json number,author,title --jq '.[0]')

            # Extract PR details from the JSON response
            PR_NUMBER=$(echo "$PR_DETAILS_JSON" | jq -r '.number')
            PR_AUTHOR=$(echo "$PR_DETAILS_JSON" | jq -r '.author.login')
            PR_TITLE=$(echo "$PR_DETAILS_JSON" | jq -r '.title')

            # If a PR number is found, add the details to the array
            if [ -n "$PR_NUMBER" ]; then
              PR_DETAILS+=("PR #$PR_NUMBER - Title: \"$PR_TITLE\" by $PR_AUTHOR")
              echo "Found PR: #$PR_NUMBER, Title: \"$PR_TITLE\", Author: $PR_AUTHOR"
            else
              echo "No PR found for commit $COMMIT_OID"
            fi
          done

          # Ensure PR details are unique and sort them
          PR_DETAILS_UNIQUE=$(echo "${PR_DETAILS[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' ')

          # Print out the unique PR details
          for PR_DETAIL in $PR_DETAILS_UNIQUE; do
            echo "$PR_DETAIL"
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
