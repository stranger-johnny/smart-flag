name: List Merged PRs for Release

on:
  pull_request:
    types: [opened, synchronize]
    branches:
      - main

jobs:
  list-merged-prs:
    if: startsWith(github.head_ref, 'develop')
    runs-on: ubuntu-latest
    steps:
      - name: リポジトリをチェックアウト
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 全履歴を取得してgit logを正確に実行

      - name: GitHub CLI の認証
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: デバッグ情報の表示
        run: |
          echo "Current branch: $(git branch --show-current)"
          echo "Available branches:"
          git branch -a
          echo "HEAD ref: ${{ github.head_ref }}"
          echo "Base ref: ${{ github.base_ref }}"

      - name: PRをリスト
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          headRef=${{ github.head_ref }}
          baseRef=${{ github.base_ref }}

          echo "🔍 Checking merged PRs into $headRef that are not yet in $baseRef ..."

          # Get the list of commits in the PR (origin/main..origin/develop)
          commits_in_pr=$(git log origin/$baseRef..origin/$headRef --format=%H)

          # Get all merged PRs into develop with necessary fields
          prs=$(gh pr list --base "$headRef" --state merged --json number,title,url,mergeCommit --limit 100)

          # Check if any PRs were found
          if [[ -z "$prs" || "$prs" == "[]" ]]; then
            echo "⚠️ No merged PRs found for this release branch."
            exit 0
          fi

          # Initialize an array to hold the included PR strings
          included_prs=()

          # Process each PR
          while read -r pr; do
            pr_number=$(echo "$pr" | jq -r '.number')
            pr_title=$(echo "$pr" | jq -r '.title')
            pr_url=$(echo "$pr" | jq -r '.url')
            mergeCommit=$(echo "$pr" | jq -r '.mergeCommit')

            # Check if the mergeCommit is in the commits_in_pr
            if [ -n "$mergeCommit" ] && echo "$commits_in_pr" | grep -q "$mergeCommit"; then
              included_prs+=("- [#$pr_number]($pr_url) $pr_title")
            fi
          done <<< "$(echo "$prs" | jq -c '.[]')"

          # Output the results
          if [ ${#included_prs[@]} -eq 0 ]; then
            echo "⚠️ No merged PRs found that are included in this release branch."
          else
            echo "✅ Merged PRs included in this release branch:"
            for pr in "${included_prs[@]}"; do
              echo "$pr"
            done
          fi

          # Save to environment variable for potential use in other jobs
          echo "merged_prs<<EOF" >> $GITHUB_ENV
          for pr in "${included_prs[@]}"; do
            echo "$pr" >> $GITHUB_ENV
          done
          echo "EOF" >> $GITHUB_ENV
  list-commits:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # すべてのコミットを取得

      - name: List all commits in the PR
        run: |
          gh pr view ${{ github.event.pull_request.number }} --json commits --jq '.commits[].oid'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  list-related-prs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # すべてのコミットを取得

      - name: List related PRs based on commits
        run: |
          BASE_COMMIT=${{ github.event.pull_request.base.sha }}
          HEAD_COMMIT=${{ github.event.pull_request.head.sha }}
          
          # すべてのPRを検索して関連するものを探す
          RELATED_PRS=$(gh pr list --state merged --search "merge commits between $BASE_COMMIT and $HEAD_COMMIT" --json number)
          
          echo "Related PRs: $RELATED_PRS"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  list-pr-with-commit-hash:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # すべてのコミットを取得

      - name: List PRs with the commit hash
        run: |
          # Initialize an empty array to store PR numbers
          PR_NUMBERS=()

          # Fetch all commit OIDs in the PR
          COMMIT_OIDS=$(gh pr view ${{ github.event.pull_request.number }} --json commits --jq '.commits[].oid')

          # Loop through each commit OID
          for COMMIT_OID in $COMMIT_OIDS; do
            echo "Processing commit: $COMMIT_OID"
          
            # Use gh pr list with the commit OID to find the related PR number
            PR_NUMBER=$(gh pr list --search "$COMMIT_OID" --json number --jq  --state merged '.[0].number')

            # If a PR number is found, push it into the array
            if [ -n "$PR_NUMBER" ]; then
              PR_NUMBERS+=($PR_NUMBER)
              echo "Found PR number: $PR_NUMBER"
            else
              echo "No PR found for commit $COMMIT_OID"
            fi
          done

          # Print the list of PR numbers
          echo "List of PR numbers: ${PR_NUMBERS[@]}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  