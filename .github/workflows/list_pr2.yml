name: List Merged PRs for Release

on:
  pull_request:
    types: [opened, synchronize]
    branches:
      - main

jobs:
  list-prs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: List PRs and Prepare Slack Message
        id: list-prs
        run: |
          PR_NUMBERS=()
          
          declare -A SEEN_PR_NUMBERS 
          declare -A PR_AUTHOR_BY_NUMBER
          declare -A PR_TITLE_BY_NUMBER
          declare -A PR_LINK_BY_NUMBER 

          COMMIT_OIDS=$(gh pr view ${{ github.event.pull_request.number }} --json commits --jq '.commits[].oid')

          for COMMIT_OID in $COMMIT_OIDS; do
            echo "Commit: $COMMIT_OID"

            PR_DETAILS=$(gh pr list --search "$COMMIT_OID" --state merged --json number,author,title --jq '.[0]')

            PR_NUMBER=$(echo "$PR_DETAILS" | jq -r '.number')
            PR_AUTHOR=$(echo "$PR_DETAILS" | jq -r '.author.login')
            PR_TITLE=$(echo "$PR_DETAILS" | jq -r '.title')

            if [[ -z "${SEEN_PR_NUMBERS[$PR_NUMBER]}" ]]; then
              PR_NUMBERS+=("$PR_NUMBER")
              SEEN_PR_NUMBERS["$PR_NUMBER"]=1

              PR_AUTHOR_BY_NUMBER["$PR_NUMBER"]="$PR_AUTHOR"
              PR_TITLE_BY_NUMBER["$PR_NUMBER"]="$PR_TITLE"
            fi
          done

          REPO_OWNER=$(echo "${GITHUB_REPOSITORY}" | cut -d'/' -f1)
          REPO_NAME=$(echo "${GITHUB_REPOSITORY}" | cut -d'/' -f2)

          for PR_NUMBER in "${PR_NUMBERS[@]}"; do
            PR_LINK="https://github.com/$REPO_OWNER/$REPO_NAME/pull/$PR_NUMBER"
            PR_LINK_BY_NUMBER["$PR_NUMBER"]="$PR_LINK"
          done

          echo "pr_numbers={PR_NUMBERS[@]}" >> "$GITHUB_OUTPUT"
          echo "pr_author_by_number=${PR_AUTHOR_BY_NUMBER[@]}" >> "$GITHUB_OUTPUT"
          echo "pr_title_by_number=${PR_TITLE_BY_NUMBER[@]}" >> "$GITHUB_OUTPUT"
          echo "pr_link_by_number=${PR_LINK_BY_NUMBER[@]}" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # New Step: Format Slack Message into JSON Blocks
      - name: Format Slack Message as JSON Blocks
        id: format-slack-json
        run: |
          PR_NUMBERS=${{ steps.list-prs.outputs.pr_numbers }}
          PR_AUTHOR_BY_NUMBER=${{ steps.list-prs.outputs.pr_author_by_number }}
          PR_TITLE_BY_NUMBER=${{ steps.list-prs.outputs.pr_title_by_number }}
          PR_LINK_BY_NUMBER=${{ steps.list-prs.outputs.pr_link_by_number }}

          SLACK_JSON="{\"blocks\": [{\"type\": \"context\", \"elements\": []}]}"

          if [ ${#PR_NUMBERS[@]} -gt 0 ]; then
            for PR_NUMBER in "${PR_NUMBERS[@]}"; do
              PR_AUTHOR="${PR_AUTHOR_BY_NUMBER[$PR_NUMBER]}"
              PR_TITLE="${PR_TITLE_BY_NUMBER[$PR_NUMBER]}"
              PR_LINK="https://github.com/$REPO_OWNER/$REPO_NAME/pull/$PR_NUMBER"

              BLOCK_ITEM="{\"type\": \"mrkdwn\", \"text\": \"${PR_TITLE} <${PR_LINK}|#${PR_NUMBER}> by ${PR_AUTHOR}\"}"
              SLACK_JSON=$(echo "$SLACK_JSON" | jq ".blocks[0].elements += [$BLOCK_ITEM]")
            done
          else

          # Ensure proper escaping for JSON format
          SLACK_JSON=$(echo "$SLACK_JSON" | sed 's/"/\\"/g' | sed "s/'/\\'/g" | tr -d '\n\r')

          echo "$SLACK_JSON"
          echo "slack_message_json=$SLACK_JSON" >> "$GITHUB_OUTPUT"

      - name: Send to Slack
        uses: slackapi/slack-github-action@v2.0.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_OAUTH_TOKEN }}
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          webhook-type: incoming-webhook
          payload: |
            ${{ steps.format-slack-json.outputs.slack_message_json }}
